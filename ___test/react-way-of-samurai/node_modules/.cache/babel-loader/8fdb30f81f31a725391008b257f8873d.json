{"ast":null,"code":"var _jsxFileName = \"/home/aleksander/Work/Snippets/___test/react-way-of-samurai/src/components/Users/UsersContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { followAC, unfollowAC, setUsersAC, setCurrentPageAC, setUsersTotalCountAC, toggleIsFetchingAC } from '../../redux/usersReducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport preloader from '../../assets/images/preloader.gif';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.isFetching ? React.createElement(\"img\", {\n      src: preloader,\n      alt: \"loading...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }) : null, React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    follow: userID => {\n      dispatch(followAC(userID));\n    },\n    unfollow: userID => {\n      dispatch(unfollowAC(userID));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(setCurrentPageAC(currentPage));\n    },\n    setTotalUsersCount: totalUsersCount => {\n      dispatch(setUsersTotalCountAC(totalUsersCount));\n    },\n    toggleIsFetching: isFetching => {\n      dispatch(toggleIsFetchingAC(isFetching));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);","map":{"version":3,"sources":["/home/aleksander/Work/Snippets/___test/react-way-of-samurai/src/components/Users/UsersContainer.js"],"names":["React","connect","followAC","unfollowAC","setUsersAC","setCurrentPageAC","setUsersTotalCountAC","toggleIsFetchingAC","axios","Users","preloader","UsersContainer","Component","onPageChanged","pageNumber","props","setCurrentPage","toggleIsFetching","get","pageSize","then","response","setUsers","data","items","componentDidMount","currentPage","setTotalUsersCount","totalCount","render","isFetching","totalUsersCount","users","follow","unfollow","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { followAC, unfollowAC, setUsersAC, setCurrentPageAC, setUsersTotalCountAC, toggleIsFetchingAC } from '../../redux/usersReducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport preloader from '../../assets/images/preloader.gif';\n\nclass UsersContainer extends React.Component {\n\n    componentDidMount() {\n      this.props.toggleIsFetching(true);\n      axios\n        .get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n        .then(response => {\n          this.props.toggleIsFetching(false);\n          this.props.setUsers(response.data.items);\n          this.props.setTotalUsersCount(response.data.totalCount);\n        });\n    }\n  \n    onPageChanged = (pageNumber) => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios\n        .get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n        .then(response => {\n          this.props.toggleIsFetching(false);\n          this.props.setUsers(response.data.items);\n        });\n    };\n  \n    render() {\n  \n      return <>\n        { this.props.isFetching ? <img src={preloader} alt=\"loading...\" /> : null}\n        <Users totalUsersCount={this.props.totalUsersCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    onPageChanged={this.onPageChanged}\n                    users={this.props.users}\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n        />\n      </>\n    }\n  }\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userID) => {\n            dispatch(followAC(userID));\n        },\n        unfollow: (userID) => {\n            dispatch(unfollowAC(userID));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users));                                \n        },\n        setCurrentPage: (currentPage) => {\n            dispatch(setCurrentPageAC(currentPage));\n        },\n        setTotalUsersCount: (totalUsersCount) => {\n            dispatch(setUsersTotalCountAC(totalUsersCount));\n        },\n        toggleIsFetching: (isFetching) => {\n          dispatch(toggleIsFetchingAC(isFetching));\n        }\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);"]},"metadata":{},"sourceType":"module"}