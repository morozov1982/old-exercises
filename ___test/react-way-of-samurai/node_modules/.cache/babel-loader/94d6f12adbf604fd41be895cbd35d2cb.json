{"ast":null,"code":"var _jsxFileName = \"/home/aleksander/Work/Snippets/___test/react-way-of-samurai/src/components/Users/UsersContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { follow, unfollow, setUsers, setCurrentPage, setUsersTotalCount, toggleIsFetching } from '../../redux/usersReducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.isFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }) : null, React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n/* const mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userID) => {\n            dispatch(followAC(userID));\n        },\n        unfollow: (userID) => {\n            dispatch(unfollowAC(userID));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users));                                \n        },\n        setCurrentPage: (currentPage) => {\n            dispatch(setCurrentPageAC(currentPage));\n        },\n        setTotalUsersCount: (totalUsersCount) => {\n            dispatch(setUsersTotalCountAC(totalUsersCount));\n        },\n        toggleIsFetching: (isFetching) => {\n          dispatch(toggleIsFetchingAC(isFetching));\n        }\n    };\n}; */\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["/home/aleksander/Work/Snippets/___test/react-way-of-samurai/src/components/Users/UsersContainer.js"],"names":["React","connect","follow","unfollow","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","axios","Users","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","then","response","data","items","componentDidMount","currentPage","setTotalUsersCount","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { follow, unfollow, setUsers, setCurrentPage, setUsersTotalCount, toggleIsFetching } from '../../redux/usersReducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\n\n\nclass UsersContainer extends React.Component {\n\n    componentDidMount() {\n      this.props.toggleIsFetching(true);\n      axios\n        .get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n        .then(response => {\n          this.props.toggleIsFetching(false);\n          this.props.setUsers(response.data.items);\n          this.props.setTotalUsersCount(response.data.totalCount);\n        });\n    }\n  \n    onPageChanged = (pageNumber) => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios\n        .get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n        .then(response => {\n          this.props.toggleIsFetching(false);\n          this.props.setUsers(response.data.items);\n        });\n    };\n  \n    render() {\n  \n      return <>\n        { this.props.isFetching ? <Preloader /> : null}\n        <Users totalUsersCount={this.props.totalUsersCount}\n                    pageSize={this.props.pageSize}\n                    currentPage={this.props.currentPage}\n                    onPageChanged={this.onPageChanged}\n                    users={this.props.users}\n                    follow={this.props.follow}\n                    unfollow={this.props.unfollow}\n        />\n      </>\n    }\n  }\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    };\n};\n\n/* const mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userID) => {\n            dispatch(followAC(userID));\n        },\n        unfollow: (userID) => {\n            dispatch(unfollowAC(userID));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users));                                \n        },\n        setCurrentPage: (currentPage) => {\n            dispatch(setCurrentPageAC(currentPage));\n        },\n        setTotalUsersCount: (totalUsersCount) => {\n            dispatch(setUsersTotalCountAC(totalUsersCount));\n        },\n        toggleIsFetching: (isFetching) => {\n          dispatch(toggleIsFetchingAC(isFetching));\n        }\n    };\n}; */\n\nexport default connect(mapStateToProps,\n    {follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching}\n  )(UsersContainer);"]},"metadata":{},"sourceType":"module"}